import React, { useRef, useState, useEffect, Suspense } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { OrbitControls, Stars, Sky, Environment, Float, Html, useTexture } from '@react-three/drei';
import * as THREE from 'three';
import { EffectComposer, Bloom, Vignette } from '@react-three/postprocessing';

// Main App Component
export default function ThumbnailGalaxy() {
  const [currentSection, setCurrentSection] = useState('home');
  const [profileOpen, setProfileOpen] = useState(false);
  
  return (
    <div className="w-screen h-screen bg-black relative overflow-hidden">
      {/* Canvas for 3D scene */}
      <Canvas shadows camera={{ position: [0, 0, 15], fov: 75 }}>
        <Suspense fallback={null}>
          <ambientLight intensity={0.3} />
          <directionalLight position={[10, 10, 5]} intensity={1} castShadow />
          <pointLight position={[-10, -10, -10]} color="#0ff" intensity={2} />
          
          {/* Scene components */}
          <CameraController currentSection={currentSection} />
          <ThumbnailPlanets visible={currentSection === 'home'} />
          <ProfileHologram 
            visible={currentSection === 'profile'} 
            open={profileOpen}
            setOpen={setProfileOpen}
          />
          <WhatsAppOrb />
          <GalaxyBackground />
          
          {/* Post-processing effects */}
          <EffectComposer>
            <Bloom luminanceThreshold={0.5} luminanceSmoothing={0.9} height={300} />
            <Vignette eskil={false} offset={0.1} darkness={0.2} />
          </EffectComposer>
        </Suspense>
      </Canvas>
      
      {/* Navigation HUD */}
      <NavigationHUD 
        currentSection={currentSection} 
        setCurrentSection={setCurrentSection} 
      />
      
      {/* Loading overlay */}
      <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center bg-black bg-opacity-80 transition-opacity duration-1000">
        <div className="text-white text-xl font-light tracking-widest">
          LOADING THUMBNAIL GALAXY...
        </div>
      </div>
    </div>
  );
}

// Camera Controller for Section Transitions
function CameraController({ currentSection }) {
  const { camera } = useThree();
  const targetPosition = useRef(new THREE.Vector3());
  const targetLookAt = useRef(new THREE.Vector3());
  
  useEffect(() => {
    switch(currentSection) {
      case 'home':
        targetPosition.current.set(0, 0, 15);
        targetLookAt.current.set(0, 0, 0);
        break;
      case 'profile':
        targetPosition.current.set(0, 3, 8);
        targetLookAt.current.set(0, 1.5, 0);
        break;
      default:
        targetPosition.current.set(0, 0, 15);
        targetLookAt.current.set(0, 0, 0);
    }
  }, [currentSection]);
  
  useFrame((state, delta) => {
    // Smooth camera transitions
    camera.position.lerp(targetPosition.current, 0.05);
    
    const direction = new THREE.Vector3();
    direction.subVectors(targetLookAt.current, camera.position).normalize();
    const lookAt = new THREE.Vector3().copy(camera.position).add(direction);
    camera.lookAt(lookAt);
  });
  
  return null;
}

// Thumbnail Planets Component
function ThumbnailPlanets({ visible }) {
  const planets = useRef([]);
  const groupRef = useRef();
  const dummyThumbnails = Array(15).fill().map((_, i) => `https://picsum.photos/400/600?random=${i}`);
  
  // Planet animation
  useFrame((state, delta) => {
    if (!groupRef.current || !visible) return;
    
    groupRef.current.rotation.y += delta * 0.05;
    
    planets.current.forEach((planet, i) => {
      planet.position.y = Math.sin(state.clock.getElapsedTime() + i) * 0.3;
      planet.rotation.y += delta * 0.1;
    });
  });
  
  if (!visible) return null;
  
  return (
    <group ref={groupRef}>
      {dummyThumbnails.map((url, i) => {
        const angle = (i / dummyThumbnails.length) * Math.PI * 2;
        const radius = 8 + Math.random() * 4;
        const x = Math.cos(angle) * radius;
        const z = Math.sin(angle) * radius;
        
        return (
          <Float key={i} speed={2} rotationIntensity={0.5} floatIntensity={1}>
            <Planet 
              position={[x, 0, z]}
              textureUrl={url}
              ref={el => planets.current[i] = el}
            />
          </Float>
        );
      })}
    </group>
  );
}

// Individual Planet Component
const Planet = React.forwardRef(({ position, textureUrl }, ref) => {
  const texture = useTexture(textureUrl);
  
  return (
    <mesh ref={ref} position={position} castShadow>
      <sphereGeometry args={[0.8, 32, 32]} />
      <meshStandardMaterial 
        map={texture} 
        roughness={0.2}
        metalness={0.1}
      />
      <mesh position={[0, 0, -1.1]}>
        <ringGeometry args={[1.1, 1.3, 32]} />
        <meshStandardMaterial 
          color="#0af"
          transparent
          opacity={0.3}
          side={THREE.DoubleSide}
        />
      </mesh>
    </mesh>
  );
});

// Profile Hologram Component
function ProfileHologram({ visible, open, setOpen }) {
  const hologramRef = useRef();
  
  useFrame(() => {
    if (hologramRef.current && visible) {
      hologramRef.current.rotation.y += 0.005;
    }
  });
  
  if (!visible) return null;
  
  return (
    <group position={[0, 0, 0]}>
      <mesh 
        ref={hologramRef} 
        onClick={() => setOpen(true)}
        position={[0, 1.5, 0]}
      >
        <cylinderGeometry args={[1.2, 1.2, 3.5, 32]} />
        <meshStandardMaterial 
          color="#0af"
          transparent
          opacity={0.15}
          emissive="#0af"
          emissiveIntensity={0.3}
          wireframe
        />
      </mesh>
      
      <Html center>
        <div className={`transition-all duration-500 ${open ? 'opacity-100 scale-100' : 'opacity-0 scale-90 pointer-events-none'}`}>
          <div className="bg-gray-900 bg-opacity-80 backdrop-blur-lg p-8 rounded-xl border border-cyan-500 shadow-lg shadow-cyan-500/20 w-80">
            <h2 className="text-2xl font-bold text-cyan-300 mb-4">Profile</h2>
            <div className="mb-4">
              <div className="bg-gray-700 rounded-full w-24 h-24 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-white text-center">Alex Morgan</h3>
              <p className="text-cyan-400 text-center">3D Developer & Designer</p>
            </div>
            <p className="text-gray-300 mb-4">
              Creating immersive digital experiences with cutting-edge 3D technologies.
              Passionate about blending art and code to build engaging web experiences.
            </p>
            <div className="flex justify-center">
              <button 
                className="px-4 py-2 bg-cyan-600 hover:bg-cyan-700 rounded-lg transition-colors"
                onClick={() => setOpen(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </Html>
    </group>
  );
}

// WhatsApp Orb Component
function WhatsAppOrb() {
  const orbRef = useRef();
  const pingRef = useRef();
  const [hovered, setHovered] = useState(false);
  
  useFrame((state) => {
    if (!orbRef.current || !pingRef.current) return;
    
    // Floating animation
    const time = state.clock.getElapsedTime();
    orbRef.current.position.y = Math.sin(time) * 0.2;
    
    // Ping animation
    pingRef.current.scale.x = 1 + Math.sin(time * 2) * 0.1;
    pingRef.current.scale.y = 1 + Math.sin(time * 2) * 0.1;
    pingRef.current.scale.z = 1 + Math.sin(time * 2) * 0.1;
  });
  
  return (
    <group position={[5, -3, 0]}>
      {/* Sonar ping effect */}
      <mesh ref={pingRef}>
        <sphereGeometry args={[1.2, 32, 32]} />
        <meshStandardMaterial 
          color="#25D366"
          transparent
          opacity={0.1}
          emissive="#25D366"
          emissiveIntensity={0.5}
        />
      </mesh>
      
      {/* WhatsApp orb */}
      <mesh 
        ref={orbRef}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={() => window.open('https://wa.me/1234567890', '_blank')}
      >
        <sphereGeometry args={[0.7, 32, 32]} />
        <meshStandardMaterial 
          color={hovered ? "#25D366" : "#128C7E"}
          emissive={hovered ? "#25D366" : "#128C7E"}
          emissiveIntensity={hovered ? 0.8 : 0.3}
          roughness={0.1}
          metalness={0.7}
        />
        <Html distanceFactor={10} position={[0, 0, 0.8]} transform>
          <div className="text-white bg-black bg-opacity-50 px-2 py-1 rounded text-xs">
            Message Me
          </div>
        </Html>
      </mesh>
    </group>
  );
}

// Galaxy Background
function GalaxyBackground() {
  const particlesRef = useRef();
  
  useFrame(() => {
    if (particlesRef.current) {
      particlesRef.current.rotation.y += 0.0005;
    }
  });
  
  return (
    <>
      <Stars radius={100} depth={50} count={5000} factor={4} />
      <Environment preset="city" />
      <fog attach="fog" args={['#000', 5, 20]} />
    </>
  );
}

// Navigation HUD Component
function NavigationHUD({ currentSection, setCurrentSection }) {
  const sections = [
    { id: 'home', label: 'GALAXY' },
    { id: 'profile', label: 'PROFILE' },
    { id: 'projects', label: 'PROJECTS' },
    { id: 'contact', label: 'CONTACT' }
  ];
  
  return (
    <div className="absolute top-6 left-1/2 transform -translate-x-1/2 z-10">
      <div className="flex space-x-2 bg-black bg-opacity-50 backdrop-blur-lg rounded-full p-1 border border-cyan-500 border-opacity-30">
        {sections.map((section) => (
          <button
            key={section.id}
            className={`px-6 py-2 rounded-full text-sm font-medium transition-all ${
              currentSection === section.id 
                ? 'bg-cyan-600 text-white' 
                : 'text-cyan-200 hover:bg-cyan-900 hover:bg-opacity-50'
            }`}
            onClick={() => setCurrentSection(section.id)}
          >
            {section.label}
          </button>
        ))}
      </div>
    </div>
  );
}
